%==========================================================================
% ◎ 最小二乗法によるランドマーク位置と自己位置の推定
%==========================================================================
% ロボットとランドマークの位置を推定するプログラム。

%--------------------------------------------------------------------------
% ● シンボリック変数作成
%--------------------------------------------------------------------------
syms q1x q1y q2x q2y q3x q3y q4x q4y;
syms x1 y1 th1 x2 y2 th2 x3 y3 th3;
syms z1x z1y z2x z2y z3x z3y z4x z4y z5x z5y z6x z6y;
syms a1x a1y a1th a2x a2y a2th;

%--------------------------------------------------------------------------
% ● 式の生成
%--------------------------------------------------------------------------
% q1 = R1*z1 + t1 ... 1
eq1x = q1x == cos(th1)*z1x - sin(th1)*z1y + x1;
eq1y = q1y == sin(th1)*z1x + cos(th1)*z1y + y1;
% q2 = R1*z2 + t1 ... 2
eq2x = q2x == cos(th1)*z2x - sin(th1)*z2y + x1;
eq2y = q2y == sin(th1)*z2x + cos(th1)*z2y + y1;
% q2 = R2*z3 + t2 ... 3
eq3x = q2x == cos(th2)*z3x - sin(th2)*z3y + x2;
eq3y = q2y == sin(th2)*z3x + cos(th2)*z3y + y2;
% q3 = R2*z4 + t2 ... 4
eq4x = q3x == cos(th2)*z4x - sin(th2)*z4y + x2;
eq4y = q3y == sin(th2)*z4x + cos(th2)*z4y + y2;
% q3 = R3*z5 + t3 ... 5
eq5x = q3x == cos(th3)*z5x - sin(th3)*z5y + x3;
eq5y = q3y == sin(th3)*z5x + cos(th3)*z5y + y3;
% q4 = R3*z6 + t3 ... 6
eq6x = q4x == cos(th3)*z6x - sin(th3)*z6y + x3;
eq6y = q4y == sin(th3)*z6x + cos(th3)*z6y + y3;
% x2 = R1+*a1 + x1 ... 7
eq7x = x2 == cos(th1)*a1x - sin(th1)*a1y + x1;
eq7y = y2 == sin(th1)*a1x + cos(th1)*a1y + y1;
eq7th = th2 == th1 + a1th;
% x3 = R2+*a2 + x2 ... 8
eq8x = x3 == cos(th2)*a2x - sin(th2)*a2y + x2;
eq8y = y3 == sin(th2)*a2x + cos(th2)*a2y + y2;
eq8th = th3 == th2 + a2th;

%--------------------------------------------------------------------------
% ● 非線形項の近似
%--------------------------------------------------------------------------
% 変数変換定義式
tr_cos_th2 = cos(th1) - sin(th1)*(th2-th1);
tr_sin_th2 = sin(th1) + cos(th1)*(th2-th1);
tr_cos_th3 = cos(th1) - sin(th1)*(th3-th1);
tr_sin_th3 = sin(th1) + cos(th1)*(th3-th1);
% 変数変換 ... 3
eq3x = subs(eq3x, cos(th2), tr_cos_th2);
eq3x = subs(eq3x, sin(th2), tr_sin_th2);
eq3y = subs(eq3y, cos(th2), tr_cos_th2);
eq3y = subs(eq3y, sin(th2), tr_sin_th2);
% 変数変換 ... 4
eq4x = subs(eq4x, cos(th2), tr_cos_th2);
eq4x = subs(eq4x, sin(th2), tr_sin_th2);
eq4y = subs(eq4y, cos(th2), tr_cos_th2);
eq4y = subs(eq4y, sin(th2), tr_sin_th2);
% 変数変換 ... 5
eq5x = subs(eq5x, cos(th3), tr_cos_th3);
eq5x = subs(eq5x, sin(th3), tr_sin_th3);
eq5y = subs(eq5y, cos(th3), tr_cos_th3);
eq5y = subs(eq5y, sin(th3), tr_sin_th3);
% 変数変換 ... 6
eq6x = subs(eq6x, cos(th3), tr_cos_th3);
eq6x = subs(eq6x, sin(th3), tr_sin_th3);
eq6y = subs(eq6y, cos(th3), tr_cos_th3);
eq6y = subs(eq6y, sin(th3), tr_sin_th3);
% 変数変換 ... 8
eq8x = subs(eq8x, cos(th2), tr_cos_th2);
eq8x = subs(eq8x, sin(th2), tr_sin_th2);
eq8y = subs(eq8y, cos(th2), tr_cos_th2);
eq8y = subs(eq8y, sin(th2), tr_sin_th2);

%--------------------------------------------------------------------------
% ● 連立方程式を行列式に変換
%--------------------------------------------------------------------------
eqarr = [eq1x,eq1y,eq2x,eq2y,eq3x,eq3y,eq4x,eq4y,eq5x,eq5y,eq6x,eq6y,eq7x,eq7y,eq7th,eq8x,eq8y,eq8th];
vars = [q1x,q1y,q2x,q2y,q3x,q3y,q4x,q4y,x2,y2,th2,x3,y3,th3];
[A,b] = equationsToMatrix(eqarr,vars);

%--------------------------------------------------------------------------
% ● ランドマークとロボット位置の初期値を指定
%--------------------------------------------------------------------------
tq1 = [0.1 -0.2]';
tq2 = [0.1 0.4]';
tq3 = [0.4 -0.1]';
tq4 = [0.4 0.4]';
tx1 = [0 0 0]';
tt1 = tx1(1:2);
ta1 = [0.1 0 deg2rad(5)]';
ta2 = [0.2 0 deg2rad(5)]';

%--------------------------------------------------------------------------
% ● 回転行列(真値) 相対→絶対
%--------------------------------------------------------------------------
% 2 x 2 相対→絶対
tr_deg1 = deg2rad(0);
tr_deg2 = deg2rad(5);
tr_deg3 = deg2rad(10);
tR1 = [cos(tr_deg1) -sin(tr_deg1); 
    sin(tr_deg1) cos(tr_deg1)];
tR2 = [cos(tr_deg2) -sin(tr_deg2); 
    sin(tr_deg2) cos(tr_deg2)];
tR3 = [cos(tr_deg3) -sin(tr_deg3); 
    sin(tr_deg3) cos(tr_deg3)];

% 3 x 3 相対→絶対
tR1_3 = [cos(tr_deg1) -sin(tr_deg1) 0; 
    sin(tr_deg1) cos(tr_deg1) 0
    0 0 1];
tR2_3 = [cos(tr_deg2) -sin(tr_deg2) 0; 
    sin(tr_deg2) cos(tr_deg2) 0
    0 0 1];
tR3_3 = [cos(tr_deg3) -sin(tr_deg3) 0; 
    sin(tr_deg3) cos(tr_deg3) 0
    0 0 1];

%--------------------------------------------------------------------------
% ● ロボットの絶対位置を求める
%--------------------------------------------------------------------------
tx2 = tR1_3*ta1 + tx1;
tx3 = tR2_3*ta2 + tx2;
tt2 = tx2(1:2);
tt3 = tx3(1:2);

%--------------------------------------------------------------------------
% ● ロボットセンサによって得た座標ziを求める
%    ノイズはここに入れる
%--------------------------------------------------------------------------
tz1 = tR1'*(tq1 - tt1);
tz2 = tR1'*(tq2 - tt1);
tz3 = tR2'*(tq2 - tt2);
tz4 = tR2'*(tq3 - tt2);
tz5 = tR3'*(tq3 - tt3);
tz6 = tR3'*(tq4 - tt3);

%--------------------------------------------------------------------------
% ● 行列に既知の値を代入する
%--------------------------------------------------------------------------
old = [x1,y1,th1,a1x,a1y,a1th,a2x,a2y,a2th,z1x,z1y,z2x,z2y,z3x,z3y,z4x,z4y,z5x,z5y,z6x,z6y];
new = [tx1(1),tx1(2),tx1(3),ta1(1),ta1(2),ta1(3),ta2(1),ta2(2),ta2(3),tz1(1),tz1(2),tz2(1),tz2(2),tz3(1),tz3(2),tz4(1),tz4(2),tz5(1),tz5(2),tz6(1),tz6(2)];
A = subs(A,old,new);
b = subs(b,old,new);

%--------------------------------------------------------------------------
% ● 最小二乗法で解を求める
%--------------------------------------------------------------------------
res = (A'*A)^(-1)*A'*b;
double(res)

%--------------------------------------------------------------------------
% ● 実行結果(14行1列の行列で示される)
%--------------------------------------------------------------------------
% ランドマークq1[x y]'
%     0.1000
%    -0.2000
% ランドマークq2[x y]'
%     0.1000
%     0.4005
% ランドマークq3[x y]'
%     0.4014
%    -0.1015
% ランドマークq4[x y]'
%     0.4026
%     0.4056
% ロボット座標x1[x y th[rad]]'
%     0.1000
%    -0.0005
%     0.0873
% ロボット座標x2[x y th[rad]]'
%     0.2996
%     0.0174
%     0.1745








